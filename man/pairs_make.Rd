% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pairs_make.R
\name{pairs_make}
\alias{pairs_make}
\title{Generate pairs}
\usage{
pairs_make(
  x,
  type = "standard_pairs",
  chaining_constant = 4,
  separation_constraint = FALSE,
  nc_include = NA,
  min_c = 10,
  max_c = 20
)
}
\arguments{
\item{x}{Data frame containing 3 variables named \code{media, core, score}.
Variable types must be character, numeric, numeric.}

\item{type}{A character string, either \code{"core_noncore"} or
\code{"standard_pairs"}. Use \code{"standard_pairs"} to construct a new
scale, or \code{"core_noncore"} to place non-core items on an existing
scale.}

\item{chaining_constant}{Integer.  Specifies the number of consecutive pairs
containg a common media item or performance.}

\item{separation_constraint}{Numeric specifying the maximum range of scores
to use when pairing, or FALSE for no separation constraint.}

\item{nc_include}{Use only for \code{type = "core_noncore"}.  Integer
specifying the number of times each non-core performance is included.}

\item{min_c}{Integer. The minimum number of times a performance should be
included. Minimum and maximum inclusions are not guaranteed. \code{min_c}
and \code{max_c} are relevant for \code{type = "standard_pairs"} only.}

\item{max_c}{Integer. The maximum number of times a performance should be
included.}
}
\value{
A data frame with paired performances, where \code{left} and
  \code{right} form the pair. \code{combination} is the row number
  corresponding to a data frame containing all possiblge pairs, used for
  checks. For importing into an interface for judging, use only \code{left},
  \code{right} and \code{chain_number}.
}
\description{
Pair performances or media items for constructing a pairwise comparison
design.  \strong{Soft deprecated} - use \code{pairs_generate} instead for
standard pairs, or \code{pairs_generate_cnc} for core versus non-core pair
generation, unless complete chains only are needed.
}
\seealso{
\code{\link{pairs_generate}}, \code{\link{pairs_generate_cnc}}
}
